const { MongoClient, ServerApiVersion } = require('mongodb');
require('dotenv').config();

const uri = process.env.MONGODB_URL;
const dbName = process.env.DB_NAME || "dbgraduat";

// Verificar que la URI est√© configurada
if (!uri) {
    console.error('‚ùå MONGODB_URL no est√° configurada en el archivo .env');
    console.error('üí° Aseg√∫rate de tener MONGODB_URL=mongodb+srv://... en tu archivo .env');
    process.exit(1);
}

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const clientOptions = {
    serverApi: {
        version: ServerApiVersion.v1,
        strict: false,
        deprecationErrors: false,
    },
    maxPoolSize: 10,
    serverSelectionTimeoutMS: 30000,
    socketTimeoutMS: 0,
    connectTimeoutMS: 30000,
    family: 4,
    retryWrites: true,
    retryReads: true,
    heartbeatFrequencyMS: 30000,
    maxIdleTimeMS: 60000,
    // Configuraciones SSL espec√≠ficas para Node.js 22.19.0 y OpenSSL
    tls: true,
    tlsAllowInvalidCertificates: true,
    tlsAllowInvalidHostnames: true
};

const client = new MongoClient(uri, clientOptions);

let db;

async function connectDB() {
    try {
        console.log("üîÑ Intentando conectar a MongoDB Atlas...");
        console.log(`üìä Base de datos: ${dbName}`);
        console.log(`üåê Cluster: dbgraduat`);
        
        await client.connect();
        console.log("‚úÖ Cliente MongoDB conectado");
        
        
        db = client.db(dbName);
        console.log(`‚úÖ Base de datos "${dbName}" seleccionada`);
        
        // Probar la conexi√≥n con ping
        await client.db("admin").command({ ping: 1 });
        console.log("‚úÖ Ping exitoso - Conexi√≥n verificada");
        
        console.log("üéâ Conectado a MongoDB Atlas exitosamente");
        return db;
    } catch (error) {
        console.error("‚ùå Error al conectar a MongoDB Atlas:");
        console.error("   Tipo:", error.name);
        console.error("   C√≥digo:", error.code);
        console.error("   Mensaje:", error.message);
        
        if (error.code === 8000) {
            console.error("\nüîê Error de autenticaci√≥n - Soluciones:");
            console.error("   1. Verifica usuario y contrase√±a en tu archivo .env");
            console.error("   2. Ve a MongoDB Atlas ‚Üí Database Access");
            console.error("   3. Aseg√∫rate de que el usuario tenga rol 'Read and write to any database'");
            console.error("   4. Ve a Network Access y autoriza tu IP (0.0.0.0/0 para todas)");
            console.error("   5. Verifica que el cluster 'dbgraduat' est√© activo");
        } else if (error.code === 6) {
            console.error("\nüåê Error de red - Soluciones:");
            console.error("   1. Verifica tu conexi√≥n a internet");
            console.error("   2. Ve a Network Access en MongoDB Atlas");
            console.error("   3. Agrega tu IP actual o usa 0.0.0.0/0");
        } else if (error.message.includes('SSL') || error.message.includes('TLS')) {
            console.error("\nüîí Error SSL/TLS - Soluciones:");
            console.error("   1. Verifica que tu versi√≥n de Node.js sea compatible (tienes 22.19.0 ‚úÖ)");
            console.error("   2. Verifica que tu conexi√≥n a internet no tenga restricciones SSL");
            console.error("   3. Intenta usar una VPN si est√°s en una red corporativa");
            console.error("   4. Verifica que el cluster de MongoDB Atlas est√© activo");
        }
        
        throw error;
    }
}

async function getDB() {
    if (!db) {
        await connectDB();
    }
    return db;
}

async function closeDB() {
    try {
        await client.close();
        console.log("üîå Conexi√≥n a MongoDB cerrada");
    } catch (error) {
        console.error("‚ùå Error al cerrar conexi√≥n:", error);
    }
}

// Funci√≥n para crear las colecciones con validaci√≥n
async function createCollections() {
    try {
        const database = await getDB();
        
        // 1. Alumnos
        await database.createCollection("Alumnos", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["Apellido", "C√≥digo_Curso", "C√≥digo_Rol", "C√≥digo_Instituci√≥n", "Correo", "Nombre", "Rol", "Tel√©fono", "Usuario"],
                    properties: {
                        Apellido: { bsonType: "string" },
                        C√≥digo_Curso: { bsonType: "string" },
                        C√≥digo_Rol: { bsonType: "string" },
                        C√≥digo_Instituci√≥n: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        Nombre: { bsonType: "string" },
                        Rol: { bsonType: "string" },
                        Tel√©fono: { bsonType: "string" },
                        Usuario: { bsonType: "string" }
                    }
                }
            }
        });

        // 2. Maestros
        await database.createCollection("Maestros", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["Apellido", "C√≥digo_Instituci√≥n", "C√≥digo_Rol", "Correo", "CURSO", "Nombre", "Rol", "Tel√©fono", "Usuario"],
                    properties: {
                        Apellido: { bsonType: "string" },
                        C√≥digo_Instituci√≥n: { bsonType: "string" },
                        C√≥digo_Rol: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        CURSO: { bsonType: "string" },
                        Nombre: { bsonType: "string" },
                        Rol: { bsonType: "string" },
                        Tel√©fono: { bsonType: "string" },
                        Usuario: { bsonType: "string" }
                    }
                }
            }
        });

        // 3. Directores
        await database.createCollection("Directores", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["Apellido", "C√≥digo_Rol", "C√≥digo_Instituci√≥n", "Correo", "Nombre", "Rol", "Tel√©fono", "Usuario"],
                    properties: {
                        Apellido: { bsonType: "string" },
                        C√≥digo_Rol: { bsonType: "string" },
                        C√≥digo_Instituci√≥n: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        Nombre: { bsonType: "string" },
                        Rol: { bsonType: "string" },
                        Tel√©fono: { bsonType: "string" },
                        Usuario: { bsonType: "string" }
                    }
                }
            }
        });

        // 4. Supervisores
        await database.createCollection("Supervisores", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["Apellido", "C√≥digo", "Correo", "DEPARTAMENTO", "Nombre", "Rol", "Tel√©fono", "Usuario"],
                    properties: {
                        Apellido: { bsonType: "string" },
                        C√≥digo: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        DEPARTAMENTO: { bsonType: "string" },
                        Nombre: { bsonType: "string" },
                        Rol: { bsonType: "string" },
                        Tel√©fono: { bsonType: "string" },
                        Usuario: { bsonType: "string" }
                    }
                }
            }
        });

        // 5. Cursos
        await database.createCollection("Cursos", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["C√≥digo", "Nombre_Curso"],
                    properties: {
                        C√≥digo: { bsonType: "string" },
                        Nombre_Curso: { bsonType: "string" }
                    }
                }
            }
        });

        // 6. Resultados
        await database.createCollection("Resultados", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["C√≥digo_Alumnos", "C√≥digo_Colegios", "C√≥digo_Directores", "C√≥digo_Maestros", "Punteo"],
                    properties: {
                        C√≥digo_Alumnos: { bsonType: "string" },
                        C√≥digo_Colegios: { bsonType: "string" },
                        C√≥digo_Directores: { bsonType: "string" },
                        C√≥digo_Maestros: { bsonType: "string" },
                        Punteo: { bsonType: "double" }
                    }
                }
            }
        });

        // 7. Login
        await database.createCollection("Login", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["Apellido", "C√≥digo_Instituci√≥n", "C√≥digo_Rol", "Contrase√±a", "Correo", "Nombre", "Rol", "Tel√©fono", "Usuario"],
                    properties: {
                        Apellido: { bsonType: "string" },
                        C√≥digo_Instituci√≥n: { bsonType: "string" },
                        C√≥digo_Rol: { bsonType: "string" },
                        Contrase√±a: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        Nombre: { bsonType: "string" },
                        Rol: { bsonType: "string" },
                        Tel√©fono: { bsonType: "string" },
                        Usuario: { bsonType: "string" }
                    }
                }
            }
        });

        // 8. Colegio
        await database.createCollection("Colegio", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["C√≥digo_Instituci√≥n", "C√≥digo_Alumno", "C√≥digo_Director", "C√≥digo_Maestro", "C√≥digo_Supervisor", "Correo", "DEPARTAMENTO", "Direcci√≥n", "Nombre_Completo", "Tel√©fono"],
                    properties: {
                        C√≥digo_Instituci√≥n: { bsonType: "string" },
                        C√≥digo_Alumno: { bsonType: "string" },
                        C√≥digo_Director: { bsonType: "string" },
                        C√≥digo_Maestro: { bsonType: "string" },
                        C√≥digo_Supervisor: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        DEPARTAMENTO: { bsonType: "string" },
                        Direcci√≥n: { bsonType: "string" },
                        ID_Colegio: { bsonType: ["string", "null"] },
                        Nombre_Completo: { bsonType: "string" },
                        Tel√©fono: { bsonType: "string" },
                        emailVerificado: { bsonType: "bool" },
                        tokenVerificacion: { bsonType: ["string", "null"] },
                        fechaCreacion: { bsonType: "date" },
                        fechaActualizacion: { bsonType: "date" }
                    }
                }
            }
        });

        // 9. UserAdmin
        await database.createCollection("UserAdmin", {
            validator: {
                $jsonSchema: {
                    bsonType: "object",
                    required: ["Nombre", "Apellido", "Usuario", "Correo", "Telefono", "Contrase√±a", "Confirmar_Contrase√±a"],
                    properties: {
                        Nombre: { bsonType: "string" },
                        Apellido: { bsonType: "string" },
                        Usuario: { bsonType: "string" },
                        Correo: { bsonType: "string" },
                        Telefono: { bsonType: "string" },
                        Contrase√±a: { bsonType: "string" },
                        Confirmar_Contrase√±a: { bsonType: "string" },
                        emailVerificado: { bsonType: "bool" },
                        tokenVerificacion: { bsonType: ["string", "null"] },
                        fechaCreacion: { bsonType: "date" },
                        fechaActualizacion: { bsonType: "date" }
                    }
                }
            }
        });

        console.log("‚úÖ Todas las colecciones fueron creadas correctamente.");
    } catch (error) {
        if (error.code === 48) {
            console.log("‚ÑπÔ∏è Las colecciones ya existen.");
        } else {
            console.error("‚ùå Error al crear las colecciones:", error);
        }
    }
}

module.exports = {
    connectDB,
    getDB,
    closeDB,
    createCollections
};